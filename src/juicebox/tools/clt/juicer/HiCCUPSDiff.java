/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2011-2016 Broad Institute, Aiden Lab
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

package juicebox.tools.clt.juicer;

import juicebox.data.Dataset;
import juicebox.data.HiCFileTools;
import juicebox.tools.clt.CommandLineParserForJuicer;
import juicebox.tools.clt.JuicerCLT;
import java.io.File;
import java.util.Arrays;
import java.util.BitSet;
import java.util.List;

import juicebox.tools.utils.juicer.hiccups.HiCCUPSUtils;
import juicebox.track.feature.*;
import org.broad.igv.Globals;
import org.broad.igv.feature.Chromosome;

/**
 * HiCCUPS Diff
 * <p/>
 * Developed by Suhas Rao, ported by Suhas Rao + Neva Durand
 * <p/>
 * -------
 * Takes as input two Hi-C maps and their associated loop calls <br>
 * Outputs two differential loop lists: loops that are in the first but not in the second
 * and loops that are in the second but not in the first<br>
 * Other parameters are used for the two HiCCUPS calls on the alternate loop lists
 * @see juicebox.tools.clt.juicer.HiCCUPS
 * hiccupsdiff [-m matrixSize] [-k normalization (NONE/VC/VC_SQRT/KR)] [-c chromosome(s)] [-r resolution(s)]
 * [-f fdr] [-p peak width] [-i window] [-t thresholds] [-d centroid distances]
 *  <firstHicFile> <secondHicFile> <firstLoopList> <secondLoopList> <outputDirectory>
 *  firstLoopList is the loop list generated by running HiCCUPS on firstHicFile
 *  secondLoopList is the loop list generated by running HiCCUPS on secondHicFile
 */
public class HiCCUPSDiff extends JuicerCLT {

    private HiCCUPS hiccups1 = null;
    private HiCCUPS hiccups2 = null;
    private Feature2DList looplist1;
    private Feature2DList looplist2;
    private String resolutions=null;
    private float maxEnrich=1.3f;
    private String outputDirectory;
    private List<Chromosome> chromosomes;

    public HiCCUPSDiff() {
        // what variables should they be able to send in?
        // need to add maxEnrich
        super("hiccupsdiff [-m matrixSize] [-k normalization (NONE/VC/VC_SQRT/KR)] [-c chromosome(s)] " +
                "[-f fdr] [-p peak width] [-i window] [-t thresholds] [-d centroid distances] " +
                "<firstHicFile> <secondHicFile> <firstLoopList> <secondLoopList> <outputDirectory>");

    }

    @Override
    protected void readJuicerArguments(String[] args, CommandLineParserForJuicer juicerParser) {
        if (args.length != 6) {
            printUsage();
            System.exit(1);
        }

        outputDirectory = args[5];

        File dir = new File(outputDirectory);

        if (!dir.exists()) {
            if (!dir.mkdir()) {
                System.err.println("Couldn't create output directory " + outputDirectory);
                System.exit(1);
            }
        }

        Dataset ds1 = HiCFileTools.extractDatasetForCLT(Arrays.asList(args[1].split("\\+")), true);
        Dataset ds2 = HiCFileTools.extractDatasetForCLT(Arrays.asList(args[2].split("\\+")), true);

        if (!(ds1.getGenomeId().equals(ds2.getGenomeId()))) {
            System.err.println("Hi-C maps must be from the same genome");
            System.exit(1);
        }
        chromosomes = ds1.getChromosomes();
        looplist1 = Feature2DParser.loadFeatures(args[3], chromosomes, true, null, false);
        looplist2 = Feature2DParser.loadFeatures(args[4], chromosomes, true, null, false);

        if (Feature2DTools.isResolutionPresent(looplist1, 5000) && Feature2DTools.isResolutionPresent(looplist2, 5000)) {
            resolutions="5000";
        }
        if (Feature2DTools.isResolutionPresent(looplist1, 10000) && Feature2DTools.isResolutionPresent(looplist2, 10000)) {
            if (resolutions==null) {
                resolutions="10000";
            }
            else resolutions+=",10000";
        }
        if (Feature2DTools.isResolutionPresent(looplist1, 25000) && Feature2DTools.isResolutionPresent(looplist2, 25000)) {
            if (resolutions==null) {
                resolutions="25000";
            }
            else resolutions+=",25000";
        }
        if (resolutions==null) {
            System.err.println("The loop lists have no resolutions in common.");
            System.exit(1);
        }

        System.out.println("Running differential HiCCUPs with resolutions " + resolutions);

        String[] res = resolutions.split(",");
        boolean processed = true;
        for (String str:res) {
            String fname = outputDirectory + File.separator + "file1" + File.separator + "requested_list_" + str;
            if (!new File(fname).exists()) processed = false;
            fname = outputDirectory + File.separator + "file2" + File.separator + "requested_list_" + str;
            if (!new File(fname).exists()) processed = false;
        }

        if (processed) {
            System.out.println("Using already created differential lists in " + outputDirectory + File.separator +
                    "file1 and " + outputDirectory + File.separator + "file2");
        }
        else {

            String hiccups1Cmd = "hiccups -m 1000 -r " + resolutions + " -f 0.1,0.1,0.1 -p 4,2,1 -i 7,5,3 -d 20000,20000,50000 "
                    + args[1] + " " + outputDirectory + File.separator + "file1 " + args[4];
            String hiccups2Cmd = "hiccups -m 1000 -r " + resolutions + " -f 0.1,0.1,0.1 -p 4,2,1 -i 7,5,3 -d 20000,20000,50000 "
                    + args[2] + " " + outputDirectory + File.separator + "file2 " + args[3];


            hiccups1 = new HiCCUPS();
            hiccups1.readJuicerArguments(hiccups1Cmd.split("\\s+"), juicerParser);

            hiccups2 = new HiCCUPS();
            hiccups2.readJuicerArguments(hiccups2Cmd.split("\\s+"), juicerParser);

            System.out.println("Running HiCCUPS with alternate loop lists");
        }
    }

    @Override
    public void run() {

        if (hiccups1 != null && hiccups2 != null) {
            hiccups1.run();
            hiccups2.run();
        }

        // for every feature in second loop list, see if there's a reasonably close one in first list
        Feature2DList conservedLoopList2 = Feature2DTools.extractReproducibleCentroids(looplist1, looplist2, 50000, 0.2);
        // for every feature in first loop list, see if there's a reasonably close one in second list
        Feature2DList conservedLoopList1 = Feature2DTools.extractReproducibleCentroids(looplist2, looplist1, 50000, 0.2);

        // get the differences - loops that appear only in looplist1
        Feature2DList diff1 = Feature2DTools.compareLists(conservedLoopList1, looplist1, false);
        // get the differences - loops that appear only in looplist2
        Feature2DList diff2 = Feature2DTools.compareLists(conservedLoopList2, looplist2, false);

        String[] res=resolutions.split(",");

        // load all the loops resulting from running HiCCUPs on the first HiC file with the second loop list
        // then filter by max enrichment: observed < maxEnrich*expected BL & donut & V & H
        Feature2DList results1 = new Feature2DList();
        for (String str:res) {
            String fname = outputDirectory + File.separator + "file1" + File.separator + "requested_list_" + str;
            Feature2DList requestedList = Feature2DParser.loadFeatures(fname, chromosomes, true, null, false);
            HiCCUPSUtils.filterOutFeaturesByEnrichment(requestedList, maxEnrich);
            results1.add(requestedList);
        }

        // load all the loops resulting from running HiCCUPs on the second HiC file with the first loop list
        // then filter by max enrichment: observed < maxEnrich*expected BL & donut & V & H
        Feature2DList results2 = new Feature2DList();
        for (String str:res) {
            String fname = outputDirectory + File.separator + "file2" + File.separator + "requested_list_" + str;
            Feature2DList requestedList = Feature2DParser.loadFeatures(fname, chromosomes, true, null, false);
            HiCCUPSUtils.filterOutFeaturesByEnrichment(requestedList, maxEnrich);
            results2.add(requestedList);
        }
        // differential loop list 1 is loops that appeared in list1 that are not enriched in Hi-C file 2
        Feature2DList differentialList1 = Feature2DList.getIntersection(diff1, results2);
        // differential loop list 2 is loops that appeared in list2 that are not enriched in Hi-C file 1
        Feature2DList differentialList2 = Feature2DList.getIntersection(diff2, results1);

        differentialList1.exportFeatureList(outputDirectory + File.separator + "differential_loops1.txt", true, Feature2DList.ListFormat.FINAL);
        differentialList2.exportFeatureList(outputDirectory + File.separator + "differential_loops2.txt", true, Feature2DList.ListFormat.FINAL);
    }
}
